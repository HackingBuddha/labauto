# .github/workflows/ci.yml
name: LabAuto CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
    # 1) Checkout source code
    - name: Checkout source
      uses: actions/checkout@v4

    # 2) Setup Micromamba environment, pinning to a specific version
    - name: Setup Micromamba
      uses: mamba-org/setup-micromamba@v1 # We can go back to v1, it's fine.
      with:
        micromamba-version: "latest"
        environment-file: env.yml
        environment-name: labauto
        init-shell: bash
        cache-environment: true
        cache-downloads: true
        post-cleanup: 'none' # <<< THE CORRECT FIX: 'none' instead of 'never'

    # 3) Lint and format check
    - name: Lint and Format Check with Ruff
      shell: bash -l {0}
      run: |
        ruff check .
        ruff format --check .

    # 4) Download the large data file
    - name: Download ClinVar data
      shell: bash -l {0}
      run: |
        echo "Downloading ClinVar data..."
        curl -L --retry 5 --retry-delay 10 \
          -o clinvar_20250615.vcf.gz \
          https://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/weekly/clinvar_20250615.vcf.gz
    
    - name: Cache ClinVar
      uses: actions/cache@v4
      with:
        path: clinvar_20250615.vcf.gz
        key: clinvar-${{ hashFiles('scripts/feature_engineering.py') }}-20250615

    - name: Download ClinVar (if not cached)
      if: steps.cache-clinvar.outputs.cache-hit != 'true'
      shell: bash -l {0}
      run: curl -L --retry 5 -o clinvar_20250615.vcf.gz \
          https://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/weekly/clinvar_20250615.vcf.gz


    # 5) Generate features & train model
    - name: Download ClinVar data
      shell: bash -l {0}
      run: |
        echo "Downloading ClinVar data..."
        curl -L --retry 5 --retry-delay 10 \
          -o clinvar_20250615.vcf.gz \
          https://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/weekly/clinvar_20250615.vcf.gz


    # 6) Run actual tests
    - name: Run Tests with Pytest
      shell: bash -l {0}
      run: |
        pytest

    # 7) Upload the trained model as an artifact
    - name: Upload Model Artifact
      uses: actions/upload-artifact@v4
      with:
        name: trained-model
        path: model.pkl